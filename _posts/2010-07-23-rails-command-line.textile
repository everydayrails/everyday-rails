---
layout: post
title: "Know your Rails command line tools"
excerpt: "todo"
---

In a keynote at last week's "Ruby Midwest":http://www.rubymidwest.com/ conference in Kansas City, Rails core contributor Yehuda Katz talked about the attention the Rails team puts into the experience of the developer. A large part of this experience is the command line, and Yehuda pointed to the efforts that have been put into making sure that interface to Rails and the software you write with it is as useful as possible. The goal is to keep you from having to refer to a manual or stack trace as little as possible.

If Rails is your first real exposure to the command line&mdash;and I know a few people for whom this is true&mdash;you may think that command lines aren't what we use to interact with computers anymore (especially on Macs). With a bit of practice, though, you may discover that the command line is a much quicker and more powerful way to get things done on your computer than a graphical interface and a mouse. Here are a few tips to get you started with the command line in Rails.

h2. The Rails 2.3 command line

You're probably familiar with the following command&mdash;it's what you type to get a new Rails project started:

{% highlight bash %}
  $ rails my_rails_project
{% endhighlight %}

There are options, or *flags*, you can pass to the <code>rails</code> command to create it with different settings. For example, to use MySQL instead of the default SQLite3 database, you'd pass the <code>-d</code> flag like this:

{% highlight bash %}
  $ rails my_rails_project -d mysql 
{% endhighlight %}

If you're using a Rails template to set up your new application, refer to it like this:

{% highlight bash %}
  $ rails my_rails_project -m path/to/template.rb
{% endhighlight %}

(Of course, replace <code>path/to/template.rb</code> with the location of your own Rails template. I've "written about Rails templates in the past":http://everydayrails.com/2010/05/22/bootstrapping-rails-template.html if you need a refresher.)

And you can chain them together like this:

{% highlight bash %}
  $ rails my_rails_project -d mysql -m path/to/template.rb
{% endhighlight %}

Inside your app, you've got more command line power in the <code>script</code> folder. Here's a look at some you're apt to use more frequently:

|. Command |. What it does |
| <code>script/about</code> | Provides some general information about your app, such as the version of Rails and Ruby it's using |
| <code>script/server</code> | Runs your application locally via the built-in webbrick server |
| <code>script/generate</code> | Adds code to your application to make it do the things you want, including scaffolds and controllers. Some gems you have installed on your system may install code via <code>generate</code> as well. |
| <code>script/destroy</code> | Removes code you've added using script/generate |
| <code>script/plugin</code> | Manages your application's plugins |
| <code>script/console</code> | Gives you interactive access to the inner Ruby workings of your application |
| <code>script/dbconsole</code> | Gives you interactive access to your database |

Type in any of these as they're listed above. Some like <code>script/server</code> work as-is. Others expect a little more input. In the spirit of making the Rails command line experience as painless as possible, they will return a list of options and expected inputs. 

h2. The Rails 3 command line

Of course, the Rails command line gets a major overhaul with Rails 3.

h2. Rake

To see a list of Rake tasks accessible within your application:

{% highlight bash %}
  $ rake -T
{% endhighlight %}

h2. Git

h2. TextMate

h2. Unix