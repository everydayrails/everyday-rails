---
layout: post
title: "Authenticated attachments in Rails with Paperclip"
excerpt: "Thoughtbot's Paperclip gem makes uploading files through web forms a breeze, but sometimes you need to keep those files protected from the general public. Here's how I require authenticated access to uploaded files in my Rails apps. Updated July 10, 2010."
---

Since Thoughtbot released it a couple of years ago, Paperclip has practically become synonymous with _file upload_ for many Rails developers. Out of the box, Paperclip saves uploaded files in your application's <code>public</code> directory, which makes good sense for files that should be accessible to everyone&mdash;by storing them there, you can serve them without the additional overhead of Rails. But what if you don't want the world at large to access uploaded files? In that case, that additional overhead becomes an asset. With a couple of additional parameters sent to Paperclip, and some modified controller code, you'll be able to keep uploaded files safe from prying eyes.

<div class="panel">
<p>For this tutorial, I'm going to assume you're familiar with "Paperclip":http://github.com/thoughtbot/paperclip, as there are plenty of tutorials already out there for using it. Refer to "the Railscasts episode on Paperclip":http://railscasts.com/episodes/134-paperclip to get up to speed. It would also be a good idea if you're familiar with Rails authentication using Devise, Authlogic, Restful Authentication, etc.&mdash;this tutorial is authentication-agnostic, but authenticating users before allowing downloads is kind of the point here.</p>

<p>Finally, I'm using Haml for markup and starting from scaffolds generated by the Nifty Generators gem&mdash;see "my tutorial on using nifty_scaffold":http://everydayrails.com/2010/06/01/nifty-scaffold.html if interested, but this really only applies to the sample views.</p>
</div>

h2. A basic example

To demonstrate this, let's imagine a simple application. We want to allow people to share documents with one another, but some of those documents may be sensitve&mdash;we thus need to make sure users are logged in before they can download them. Since we can't protect files saved in the application's <code>public</code> directory to this level, we'll need to go beyond Paperclip's default options. To do this, we'll take a generated scaffold, then modify its model and controller to allow us verify a user is logged in before downloading a file. 

<div class="panel">
  <p>You could also sprinkle in some authorization here&mdash;for example, I can only post an updated version of a file if I'm the one who posted it in the first place&mdash;but that's beyond the scope of this tutorial. If you needed to do this you'd use an authorization system like Declarative Authorization, CanCan, or RESTful_ACL.</p>
</div>

Let's begin with the Document model. I'm adding one option to Paperclip's standard <code>has_attached_file</code> here: I'm overriding the default save path&mdash;instead of my <code>public</code> directory, I'm saving to a directory called <code>uploads</code>, which gets created at my application's root level.

<div class="box code">
  app/models/document.rb
</div>

{% highlight ruby %}
  class Document < ActiveRecord::Base
    attr_accessible :document

    has_attached_file :upload,
      :path => ":rails_root/uploads/:class/:id/:basename.:extension"
      
    # rest of the model ...
  end
{% endhighlight %}

Jumping over to the controller, there are two changes of note:

# A <code>before_filter</code> to verify that someone is logged in. This example uses Restful Authentication's <code>:login_required</code>; replace as needed with your preferred login system's filter.
# I've replaced the <code>show</code> generated by my scaffold, so that instead of returning HTML code to my browser it returns the file. I do this by using basic Ruby <code>File</code> methods&mdash;first I open the file at the specified document's path, then I use <code>send_data</code> to push the binary data back to the web browser.

<div class="panel">
  <p><strong>Update:</strong> As pointed out by James Bebbington, there's a better way to return files to the browser. I've commented out my original method and replaced it with a more appropriate one&mdash;sorry, I let some code carry over from an older project that retrieved binary data from a database. For more information on this correct method, including using the X-SendFile server module to offload the file transfer from your app to your web server, see "File Downloads Done Right":http://www.therailsway.com/2009/2/22/file-downloads-done-right.</p>
</div>

<div class="box code">
  app/controllers/documents_controller.rb
</div>

{% highlight ruby %}
  class DocumentsController < ApplicationController

    # checks for login; replace with your login system's method
    before_filter :login_required

    def show
      @document = Document.find(params[:id])
      # file = File.new(@document.document.path, "r")
      # send_data(file.read,
      #  :filename     =>  @document.document_file_name,
      #  :type         =>  @document.document_content_type,
      #  :disposition  =>  'inline')
      
      send_file @document.document.path, :type => @document.document_content_type, :disposition => 'inline' 
    end
    
    # rest of the controller ...
  end
{% endhighlight %}

For completion's sake, here is what my <code>index</code> view looks like for the Documents controller. Since I'm using a basic RESTful scaffold, this is pretty straightforward. I've added a couple of extra columns to display the content type and file size of each document.

<div class="box code">
  app/views/documents/index.html.haml
</div>

{% highlight haml %}
  %table
    %tr
      %th Name
      %th Type
      %th Size
    - documents.each do |document|
      %tr
        %td= link_to h(document.document_file_name), document
        %td= document.document_content_type
        %td= number_to_human_size(document.document_file_size)
        %td= link_to 'Replace', edit_document_path(document)
        %td= link_to 'Delete', document_path(document), :method => :delete, :confirm => 'Are you sure?'
{% endhighlight %}

<div class="panel">
  <p>At this point you could delete the <code>show.html.haml</code> view file; it's not needed given how we've modified the controller. Or you could hold off on deleting it after you read the section "A slightly fancier example" below.</p>
</div>

Finally, you'll want to tell your version control system to ignore files that get added to your application's <code>uploads</code> directory. Here's how to add it to a <code>.gitignore</code> file:

<div class="box code">
  .gitignore.rb
</div>

{% highlight bash %}
  uploads/*
{% endhighlight %}

h2. A slightly fancier example

So far, we've used standard Rails RESTful scaffolding techniques to serve up files. This works because we don't otherwise need the <code>show</code> method to return anything to the browser. If we did need to use it&mdash;say, to display more information about the document, or add an interface for our users to add comments, we'd need to change a couple of things.

First, in the model, we need to change the URL used to download the file. I'm going to point it to a <code>download</code> method that will be in <code>documents_controller.rb</code>:

<div class="box code">
  app/models/document.rb
</div>

{% highlight ruby %}
  class Document < ActiveRecord::Base
    attr_accessible :document, :description

    has_attached_file :upload,
      :path => ":rails_root/uploads/:class/:id/:basename.:extension",
      :url => "/documents/:id/download"
      
    # rest of the model ...
  end
{% endhighlight %}

Then we need to add that new <code>download</code> method to the controller. Note this is the same code we were using earlier in <code>show</code>; now, since we need <code>show</code> to do typical <code>show</code>-type stuff, we just need to move this code elsewhere.

<div class="panel">
  <p>As noted above, my original controller code worked but was not optimal. The old code is commented out here with the correct <code>send_file</code> method now being used.</p>
</div>

<div class="box code">
  app/controllers/documents_controller.rb
</div>

{% highlight ruby %}
  class DocumentsController < ApplicationController

    # checks for login; replace with your login system's method
    before_filter :login_required

    # generated CRUD actions ...

    def download
      @document = Document.find(params[:id])
      # file = File.new(@document.document.path, "r")
      # send_data(file.read,
      #  :filename     =>  @document.document_file_name,
      #  :type         =>  @document.document_content_type,
      #  :disposition  =>  'inline') 
       
      send_file @document.document.path, :type => @document.document_content_type, :disposition => 'inline'
    end
  end
{% endhighlight %}

<div class="panel">
  <p>Don't forget to add <code>download</code> as a member route to <code>documents</code> in your <code>routes.rb</code> file.</p>
</div>

Finally, here's what the <code>show</code> view might look like&mdash;let's just add a simple Download link:

<div class="box code">
  app/views/documents/show.html.haml
</div>

{% highlight haml %}
  - title h(@document.document.name)

  %p
    %strong Description:
    =h @document.description
    
  %p
    = link_to "Download File", @document.document.url
{% endhighlight %}

That's all there is to it&mdash;now, instead of exposing uploaded files to the world by sticking them in your <code>public</code> directory, you've got some extra Rails logic to make sure only the right people can access them.